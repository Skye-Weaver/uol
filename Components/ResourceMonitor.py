"""
–ú–æ–¥—É–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, –ø–æ—Ä–æ–≥–æ–≤ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.
"""

import time
import threading
import psutil
import GPUtil
from typing import Dict, Any, Optional, Callable, List
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import torch
from collections import deque
import json
from pathlib import Path
import logging


@dataclass
class ResourceSnapshot:
    """–°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    timestamp: float
    cpu_percent: float
    memory_percent: float
    memory_used_gb: float
    memory_total_gb: float

    # GPU –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    gpu_count: int = 0
    gpu_data: Dict[str, Dict[str, float]] = field(default_factory=dict)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    disk_usage: Optional[Dict[str, float]] = None
    network_io: Optional[Dict[str, float]] = None

    @property
    def timestamp_str(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞"""
        dt = datetime.fromtimestamp(self.timestamp)
        return dt.strftime("%H:%M:%S.%f")[:-3]  # –º–º:—Å—Å.–º—Å

    @property
    def is_critical(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
        return (
            self.cpu_percent > 90.0 or
            self.memory_percent > 90.0 or
            any(gpu.get('usage', 0) > 95.0 for gpu in self.gpu_data.values())
        )


@dataclass
class ResourceAlert:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    alert_type: str  # 'cpu', 'memory', 'gpu', 'disk', 'network'
    severity: str    # 'info', 'warning', 'critical'
    message: str
    value: float
    threshold: float
    timestamp: float

    @property
    def severity_icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"""
        icons = {
            'info': '‚ÑπÔ∏è',
            'warning': '‚ö†Ô∏è',
            'critical': 'üö®'
        }
        return icons.get(self.severity, '‚ùì')


class ResourceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""

    def __init__(self,
                 interval: float = 1.0,
                 history_size: int = 3600,  # 1 —á–∞—Å –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 1 —Å–µ–∫
                 alert_callbacks: Optional[List[Callable]] = None):
        self.interval = interval
        self.history_size = history_size
        self.alert_callbacks = alert_callbacks or []

        # –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.history: deque[ResourceSnapshot] = deque(maxlen=history_size)
        self.alerts: deque[ResourceAlert] = deque(maxlen=1000)

        # –ü–æ—Ä–æ–≥–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        self.thresholds = {
            'cpu_warning': 80.0,
            'cpu_critical': 95.0,
            'memory_warning': 85.0,
            'memory_critical': 95.0,
            'gpu_memory_warning': 90.0,
            'gpu_memory_critical': 95.0,
            'gpu_temp_warning': 75.0,
            'gpu_temp_critical': 85.0,
            'disk_warning': 90.0,
            'disk_critical': 95.0
        }

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.is_monitoring = False
        self.monitor_thread: Optional[threading.Thread] = None
        self.stop_event = threading.Event()

        # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.gpu_available = torch.cuda.is_available()
        self.gpu_count = torch.cuda.device_count() if self.gpu_available else 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'snapshots_taken': 0,
            'alerts_generated': 0,
            'monitoring_start_time': None,
            'last_snapshot_time': None
        }

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_monitoring:
            return

        self.is_monitoring = True
        self.stop_event.clear()
        self.stats['monitoring_start_time'] = time.time()

        self.monitor_thread = threading.Thread(
            target=self._monitoring_loop,
            name="ResourceMonitor",
            daemon=True
        )
        self.monitor_thread.start()

        print("üî• –ó–∞–ø—É—â–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} —Å–µ–∫")
        print(f"   GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if self.gpu_available else '–ù–µ—Ç'}")
        if self.gpu_available:
            print(f"   GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {self.gpu_count}")

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitoring:
            return

        self.is_monitoring = False
        self.stop_event.set()

        if self.monitor_thread and self.monitor_thread.is_alive():
            self.monitor_thread.join(timeout=2.0)

        print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
        print(f"   –í—Å–µ–≥–æ —Å–Ω–∏–º–∫–æ–≤: {self.stats['snapshots_taken']}")
        print(f"   –û–ø–æ–≤–µ—â–µ–Ω–∏–π: {self.stats['alerts_generated']}")

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while not self.stop_event.is_set():
            try:
                snapshot = self._take_snapshot()
                self.history.append(snapshot)
                self.stats['snapshots_taken'] += 1
                self.stats['last_snapshot_time'] = snapshot.timestamp

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
                self._check_thresholds(snapshot)

                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                if self.stop_event.wait(timeout=self.interval):
                    break

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(1.0)

    def _take_snapshot(self) -> ResourceSnapshot:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
        timestamp = time.time()

        # CPU –∏ –ø–∞–º—è—Ç—å
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        memory_used_gb = memory.used / (1024**3)
        memory_total_gb = memory.total / (1024**3)

        snapshot = ResourceSnapshot(
            timestamp=timestamp,
            cpu_percent=cpu_percent,
            memory_percent=memory_percent,
            memory_used_gb=memory_used_gb,
            memory_total_gb=memory_total_gb,
            gpu_count=self.gpu_count
        )

        # GPU –¥–∞–Ω–Ω—ã–µ
        if self.gpu_available:
            try:
                gpus = GPUtil.getGPUs()
                for i, gpu in enumerate(gpus):
                    snapshot.gpu_data[f'gpu_{i}'] = {
                        'usage': gpu.load * 100,
                        'memory_used': gpu.memoryUsed,
                        'memory_total': gpu.memoryTotal,
                        'memory_percent': (gpu.memoryUsed / gpu.memoryTotal * 100) if gpu.memoryTotal > 0 else 0,
                        'temperature': gpu.temperature
                    }
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GPU –¥–∞–Ω–Ω—ã—Ö: {e}")

        # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        try:
            disk = psutil.disk_usage('/')
            snapshot.disk_usage = {
                'total_gb': disk.total / (1024**3),
                'used_gb': disk.used / (1024**3),
                'free_gb': disk.free / (1024**3),
                'percent': disk.percent
            }
        except Exception:
            pass

        # –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        try:
            net_io = psutil.net_io_counters()
            snapshot.network_io = {
                'bytes_sent': net_io.bytes_sent,
                'bytes_recv': net_io.bytes_recv,
                'packets_sent': net_io.packets_sent,
                'packets_recv': net_io.packets_recv
            }
        except Exception:
            pass

        return snapshot

    def _check_thresholds(self, snapshot: ResourceSnapshot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        alerts = []

        # CPU –ø—Ä–æ–≤–µ—Ä–∫–∏
        if snapshot.cpu_percent >= self.thresholds['cpu_critical']:
            alerts.append(ResourceAlert(
                'cpu', 'critical',
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {snapshot.cpu_percent:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['cpu_critical']}%)",
                snapshot.cpu_percent, self.thresholds['cpu_critical'],
                snapshot.timestamp
            ))
        elif snapshot.cpu_percent >= self.thresholds['cpu_warning']:
            alerts.append(ResourceAlert(
                'cpu', 'warning',
                f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {snapshot.cpu_percent:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['cpu_warning']}%)",
                snapshot.cpu_percent, self.thresholds['cpu_warning'],
                snapshot.timestamp
            ))

        # –ü–∞–º—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
        if snapshot.memory_percent >= self.thresholds['memory_critical']:
            alerts.append(ResourceAlert(
                'memory', 'critical',
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {snapshot.memory_percent:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['memory_critical']}%)",
                snapshot.memory_percent, self.thresholds['memory_critical'],
                snapshot.timestamp
            ))
        elif snapshot.memory_percent >= self.thresholds['memory_warning']:
            alerts.append(ResourceAlert(
                'memory', 'warning',
                f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {snapshot.memory_percent:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['memory_warning']}%)",
                snapshot.memory_percent, self.thresholds['memory_warning'],
                snapshot.timestamp
            ))

        # GPU –ø—Ä–æ–≤–µ—Ä–∫–∏
        for gpu_id, gpu_data in snapshot.gpu_data.items():
            gpu_name = f"GPU {gpu_id}"

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            mem_percent = gpu_data.get('memory_percent', 0)
            if mem_percent >= self.thresholds['gpu_memory_critical']:
                alerts.append(ResourceAlert(
                    'gpu', 'critical',
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏ {gpu_name}: {mem_percent:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['gpu_memory_critical']}%)",
                    mem_percent, self.thresholds['gpu_memory_critical'],
                    snapshot.timestamp
                ))
            elif mem_percent >= self.thresholds['gpu_memory_warning']:
                alerts.append(ResourceAlert(
                    'gpu', 'warning',
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏ {gpu_name}: {mem_percent:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['gpu_memory_warning']}%)",
                    mem_percent, self.thresholds['gpu_memory_warning'],
                    snapshot.timestamp
                ))

            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            temp = gpu_data.get('temperature', 0)
            if temp >= self.thresholds['gpu_temp_critical']:
                alerts.append(ResourceAlert(
                    'gpu', 'critical',
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU {gpu_name}: {temp:.0f}¬∞C (–ø–æ—Ä–æ–≥: {self.thresholds['gpu_temp_critical']}¬∞C)",
                    temp, self.thresholds['gpu_temp_critical'],
                    snapshot.timestamp
                ))
            elif temp >= self.thresholds['gpu_temp_warning']:
                alerts.append(ResourceAlert(
                    'gpu', 'warning',
                    f"–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU {gpu_name}: {temp:.0f}¬∞C (–ø–æ—Ä–æ–≥: {self.thresholds['gpu_temp_warning']}¬∞C)",
                    temp, self.thresholds['gpu_temp_warning'],
                    snapshot.timestamp
                ))

        # –î–∏—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if snapshot.disk_usage and snapshot.disk_usage['percent'] >= self.thresholds['disk_critical']:
            alerts.append(ResourceAlert(
                'disk', 'critical',
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {snapshot.disk_usage['percent']:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['disk_critical']}%)",
                snapshot.disk_usage['percent'], self.thresholds['disk_critical'],
                snapshot.timestamp
            ))
        elif snapshot.disk_usage and snapshot.disk_usage['percent'] >= self.thresholds['disk_warning']:
            alerts.append(ResourceAlert(
                'disk', 'warning',
                f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {snapshot.disk_usage['percent']:.1f}% (–ø–æ—Ä–æ–≥: {self.thresholds['disk_warning']}%)",
                snapshot.disk_usage['percent'], self.thresholds['disk_warning'],
                snapshot.timestamp
            ))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        for alert in alerts:
            self.alerts.append(alert)
            self.stats['alerts_generated'] += 1

            # –í—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–π
            for callback in self.alert_callbacks:
                try:
                    callback(alert)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

    def get_current_status(self) -> Optional[ResourceSnapshot]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
        return self.history[-1] if self.history else None

    def get_recent_history(self, seconds: int = 60) -> List[ResourceSnapshot]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–µ–∫—É–Ω–¥"""
        if not self.history:
            return []

        cutoff_time = time.time() - seconds
        return [snap for snap in self.history if snap.timestamp >= cutoff_time]

    def get_resource_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º"""
        if not self.history:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"}

        current = self.history[-1]
        recent = self.get_recent_history(300)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç

        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        avg_cpu = sum(s.cpu_percent for s in recent) / len(recent) if recent else 0
        avg_memory = sum(s.memory_percent for s in recent) / len(recent) if recent else 0

        # GPU —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        gpu_stats = {}
        if current.gpu_data:
            for gpu_id, gpu_data in current.gpu_data.items():
                recent_gpu = [s.gpu_data.get(gpu_id, {}) for s in recent if gpu_id in s.gpu_data]
                if recent_gpu:
                    avg_usage = sum(g.get('usage', 0) for g in recent_gpu) / len(recent_gpu)
                    avg_temp = sum(g.get('temperature', 0) for g in recent_gpu) / len(recent_gpu)
                    gpu_stats[gpu_id] = {
                        'current_usage': gpu_data.get('usage', 0),
                        'current_temp': gpu_data.get('temperature', 0),
                        'avg_usage_5min': avg_usage,
                        'avg_temp_5min': avg_temp
                    }

        return {
            'current': {
                'timestamp': current.timestamp_str,
                'cpu_percent': current.cpu_percent,
                'memory_percent': current.memory_percent,
                'memory_used_gb': current.memory_used_gb,
                'memory_total_gb': current.memory_total_gb,
                'gpu_data': current.gpu_data
            },
            'averages_5min': {
                'cpu_percent': avg_cpu,
                'memory_percent': avg_memory
            },
            'gpu_stats': gpu_stats,
            'alerts_count': len(self.alerts),
            'monitoring_duration': time.time() - (self.stats['monitoring_start_time'] or time.time()),
            'snapshots_count': len(self.history)
        }

    def set_threshold(self, resource: str, level: str, value: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
        key = f"{resource}_{level}"
        if key in self.thresholds:
            self.thresholds[key] = value
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ {key}: {value}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ä–æ–≥: {key}")

    def add_alert_callback(self, callback: Callable[[ResourceAlert], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        self.alert_callbacks.append(callback)

    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.history.clear()
        self.alerts.clear()
        print("üßπ –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—â–µ–Ω–∞")

    def export_history(self, filepath: str, format: str = 'json'):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if format.lower() == 'json':
            data = {
                'snapshots': [self._snapshot_to_dict(s) for s in self.history],
                'alerts': [self._alert_to_dict(a) for a in self.alerts],
                'stats': self.stats,
                'export_time': time.time()
            }

            Path(filepath).parent.mkdir(parents=True, exist_ok=True)
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

            print(f"üìä –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filepath}")

    def _snapshot_to_dict(self, snapshot: ResourceSnapshot) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        return {
            'timestamp': snapshot.timestamp,
            'timestamp_str': snapshot.timestamp_str,
            'cpu_percent': snapshot.cpu_percent,
            'memory_percent': snapshot.memory_percent,
            'memory_used_gb': snapshot.memory_used_gb,
            'memory_total_gb': snapshot.memory_total_gb,
            'gpu_count': snapshot.gpu_count,
            'gpu_data': snapshot.gpu_data,
            'disk_usage': snapshot.disk_usage,
            'network_io': snapshot.network_io
        }

    def _alert_to_dict(self, alert: ResourceAlert) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        return {
            'alert_type': alert.alert_type,
            'severity': alert.severity,
            'message': alert.message,
            'value': alert.value,
            'threshold': alert.threshold,
            'timestamp': alert.timestamp,
            'timestamp_str': datetime.fromtimestamp(alert.timestamp).strftime("%Y-%m-%d %H:%M:%S")
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
resource_monitor = ResourceMonitor()