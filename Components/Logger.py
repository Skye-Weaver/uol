"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.
–í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU/CPU, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –∏ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤.
"""

import time
import logging
import psutil
import GPUtil
from functools import wraps
from typing import Optional, Dict, Any, Callable
from pathlib import Path
import json
from datetime import datetime
import threading
from concurrent.futures import ThreadPoolExecutor
import torch
from dataclasses import dataclass, field
from contextlib import contextmanager
from tqdm import tqdm
import os
from logging.handlers import RotatingFileHandler
import sys


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    operation_name: str
    start_time: float
    end_time: Optional[float] = None
    cpu_usage_start: float = 0.0
    cpu_usage_end: float = 0.0
    memory_usage_start: int = 0
    memory_usage_end: int = 0
    gpu_usage_start: Optional[Dict[str, float]] = None
    gpu_usage_end: Optional[Dict[str, float]] = None
    success: bool = True
    error_message: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)

    @property
    def duration(self) -> float:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.end_time is None:
            return time.time() - self.start_time
        return self.end_time - self.start_time

    @property
    def cpu_delta(self) -> float:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        return self.cpu_usage_end - self.cpu_usage_start

    @property
    def memory_delta(self) -> int:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        return self.memory_usage_end - self.memory_usage_start


class ResourceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""

    def __init__(self):
        self.gpu_available = torch.cuda.is_available()
        self.gpu_count = torch.cuda.device_count() if self.gpu_available else 0

    def get_cpu_usage(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        return psutil.cpu_percent(interval=0.1)

    def get_memory_usage(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        return psutil.Process().memory_info().rss

    def get_gpu_usage(self) -> Optional[Dict[str, float]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU"""
        if not self.gpu_available:
            return None

        try:
            gpus = GPUtil.getGPUs()
            gpu_data = {}
            for i, gpu in enumerate(gpus):
                gpu_data[f'gpu_{i}'] = {
                    'usage': gpu.load * 100,
                    'memory_used': gpu.memoryUsed,
                    'memory_total': gpu.memoryTotal,
                    'temperature': gpu.temperature
                }
            return gpu_data
        except Exception:
            return None

    def get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            'cpu_count': psutil.cpu_count(),
            'cpu_count_logical': psutil.cpu_count(logical=True),
            'memory_total': psutil.virtual_memory().total,
            'gpu_available': self.gpu_available,
            'gpu_count': self.gpu_count,
            'torch_version': torch.__version__,
            'cuda_version': torch.version.cuda if self.gpu_available else None
        }


class AdvancedLogger:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏"""

    def __init__(self, name: str = "VideoProcessor", log_dir: str = "logs"):
        self.name = name
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)

        self.monitor = ResourceMonitor()
        self.active_operations: Dict[str, PerformanceMetrics] = {}
        self._lock = threading.Lock()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤
        self._setup_loggers()

        # Thread pool –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="Logger")

        # GPU-first –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._ensure_gpu_priority()

    def _setup_loggers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger(f"{self.name}.main")
        self.logger.setLevel(logging.DEBUG)

        # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        log_file = self.log_dir / f"{self.name.lower()}.log"
        file_handler = RotatingFileHandler(
            log_file,
            maxBytes=10 * 1024 * 1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)

        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        file_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        console_formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )

        file_handler.setFormatter(file_formatter)
        console_handler.setFormatter(console_formatter)

        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.perf_logger = logging.getLogger(f"{self.name}.performance")
        perf_file = self.log_dir / f"{self.name.lower()}_performance.log"
        perf_handler = RotatingFileHandler(
            perf_file,
            maxBytes=5 * 1024 * 1024,  # 5MB
            backupCount=3,
            encoding='utf-8'
        )
        perf_handler.setFormatter(file_formatter)
        self.perf_logger.addHandler(perf_handler)
        self.perf_logger.setLevel(logging.INFO)

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
        self.error_logger = logging.getLogger(f"{self.name}.errors")
        error_file = self.log_dir / f"{self.name.lower()}_errors.log"
        error_handler = RotatingFileHandler(
            error_file,
            maxBytes=5 * 1024 * 1024,  # 5MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setFormatter(file_formatter)
        self.error_logger.addHandler(error_handler)
        self.error_logger.setLevel(logging.ERROR)

    def _ensure_gpu_priority(self):
        """–û–±–µ—Å–ø–µ—á–∏—Ç—å GPU-first –ø–æ–¥—Ö–æ–¥"""
        if self.monitor.gpu_available:
            try:
                # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π GPU
                torch.cuda.set_device(0)

                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è GPU
                torch.backends.cudnn.benchmark = True
                torch.backends.cudnn.deterministic = False

                # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à GPU
                torch.cuda.empty_cache()

                self.logger.info(f"GPU-first —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU: {torch.cuda.get_device_name(0)}")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GPU-first —Ä–µ–∂–∏–º: {e}")
        else:
            self.logger.info("GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU —Ä–µ–∂–∏–º")

    def start_operation(self, operation_name: str, metadata: Optional[Dict[str, Any]] = None) -> str:
        """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operation_id = f"{operation_name}_{time.time()}_{threading.get_ident()}"

        with self._lock:
            metrics = PerformanceMetrics(
                operation_name=operation_name,
                start_time=time.time(),
                cpu_usage_start=self.monitor.get_cpu_usage(),
                memory_usage_start=self.monitor.get_memory_usage(),
                gpu_usage_start=self.monitor.get_gpu_usage(),
                metadata=metadata or {}
            )
            self.active_operations[operation_id] = metrics

        self.logger.info(f"üöÄ –ù–∞—á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_name} (ID: {operation_id})")
        return operation_id

    def end_operation(self, operation_id: str, success: bool = True, error_message: Optional[str] = None):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self._lock:
            if operation_id not in self.active_operations:
                self.logger.warning(f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            metrics = self.active_operations[operation_id]
            metrics.end_time = time.time()
            metrics.cpu_usage_end = self.monitor.get_cpu_usage()
            metrics.memory_usage_end = self.monitor.get_memory_usage()
            metrics.gpu_usage_end = self.monitor.get_gpu_usage()
            metrics.success = success
            metrics.error_message = error_message

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._log_operation_results(metrics)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        with self._lock:
            del self.active_operations[operation_id]

    def _log_operation_results(self, metrics: PerformanceMetrics):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        duration = metrics.duration
        cpu_delta = metrics.cpu_delta
        memory_delta = metrics.memory_delta / 1024 / 1024  # MB

        status_icon = "‚úÖ" if metrics.success else "‚ùå"
        status_text = "–£–°–ü–ï–•" if metrics.success else "–û–®–ò–ë–ö–ê"

        # –û—Å–Ω–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger.info(
            ".2f"
            ".1f"
            ".1f"
            f"{status_icon} {status_text}"
        )

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_data = {
            'operation': metrics.operation_name,
            'duration': duration,
            'cpu_usage_start': metrics.cpu_usage_start,
            'cpu_usage_end': metrics.cpu_usage_end,
            'cpu_delta': cpu_delta,
            'memory_start_mb': metrics.memory_usage_start / 1024 / 1024,
            'memory_end_mb': metrics.memory_usage_end / 1024 / 1024,
            'memory_delta_mb': memory_delta,
            'success': metrics.success,
            'timestamp': datetime.now().isoformat(),
            'metadata': metrics.metadata
        }

        if metrics.gpu_usage_start and metrics.gpu_usage_end:
            perf_data['gpu_usage_start'] = metrics.gpu_usage_start
            perf_data['gpu_usage_end'] = metrics.gpu_usage_end

        if not metrics.success and metrics.error_message:
            perf_data['error'] = metrics.error_message

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        self.executor.submit(self._write_performance_log, perf_data)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
        if not metrics.success and metrics.error_message:
            self.error_logger.error(
                f"–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {metrics.operation_name}: {metrics.error_message}"
            )

    def _write_performance_log(self, perf_data: Dict[str, Any]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            log_entry = json.dumps(perf_data, ensure_ascii=False, indent=2)
            self.perf_logger.info(f"PERFORMANCE_DATA: {log_entry}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    @contextmanager
    def operation_context(self, operation_name: str, metadata: Optional[Dict[str, Any]] = None):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        operation_id = self.start_operation(operation_name, metadata)
        try:
            yield operation_id
            self.end_operation(operation_id, success=True)
        except Exception as e:
            self.end_operation(operation_id, success=False, error_message=str(e))
            raise

    def create_progress_bar(self, total: int, desc: str = "", unit: str = "it") -> tqdm:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
        return tqdm(
            total=total,
            desc=desc,
            unit=unit,
            bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}] '
                      '{postfix}]'
        )

    def log_system_info(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        system_info = self.monitor.get_system_info()
        self.logger.info("=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ===")
        for key, value in system_info.items():
            self.logger.info(f"{key}: {value}")
        self.logger.info("=" * 30)

    def get_active_operations_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        with self._lock:
            return len(self.active_operations)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.executor.shutdown(wait=True)
        # –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if self.monitor.gpu_available:
            try:
                torch.cuda.empty_cache()
            except Exception:
                pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = AdvancedLogger()


def timed_operation(operation_name: str, metadata: Optional[Dict[str, Any]] = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs):
            with logger.operation_context(operation_name, metadata):
                return func(*args, **kwargs)
        return wrapper
    return decorator


def log_function_call(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        func_name = f"{func.__module__}.{func.__name__}" if hasattr(func, '__module__') else func.__name__
        logger.logger.debug(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}")
        start_time = time.time()

        try:
            result = func(*args, **kwargs)
            duration = time.time() - start_time
            logger.logger.debug(".3f")
            return result
        except Exception as e:
            duration = time.time() - start_time
            logger.logger.error(".3f")
            raise
    return wrapper