#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ "—Ñ–∏–ª—å–º"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ ===")
    try:
        from Components.FilmMode import FilmAnalyzer, analyze_film_main, FilmMoment, RankedMoment
        from Components.config import get_config, FilmModeConfig
        from Components.YoutubeDownloader import download_youtube_video
        from Components.Transcription import transcribe_unified
        from Components.LanguageTasks import build_transcription_prompt, call_llm_with_retry, make_generation_config
        from Components.Database import VideoDatabase
        from Components.Logger import logger

        print("‚úì –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ñ–∏–ª—å–º"""
    print("\n=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    try:
        from Components.config import get_config
        config = get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ film_mode –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if hasattr(config, 'film_mode'):
            film_config = config.film_mode
            print(f"‚úì –†–µ–∂–∏–º —Ñ–∏–ª—å–º –≤–∫–ª—é—á–µ–Ω: {film_config.enabled}")
            print(f"‚úì –ú–∞–∫—Å–∏–º—É–º –º–æ–º–µ–Ω—Ç–æ–≤: {film_config.max_moments}")
            print(f"‚úì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ COMBO: {film_config.combo_duration}")
            print(f"‚úì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SINGLE: {film_config.single_duration}")
            print(f"‚úì –ü–æ—Ä–æ–≥ –ø–∞—É–∑—ã: {film_config.pause_threshold}")
            print(f"‚úì –ú–æ–¥–µ–ª—å LLM: {film_config.llm_model}")
            return True
        else:
            print("‚úó film_mode –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_film_analyzer_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FilmAnalyzer"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FilmAnalyzer ===")
    try:
        from Components.FilmMode import FilmAnalyzer
        from Components.config import get_config

        config = get_config()
        analyzer = FilmAnalyzer(config)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        assert hasattr(analyzer, 'config'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç config"
        assert hasattr(analyzer, 'film_config'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç film_config"
        assert analyzer.film_config is not None, "film_config –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        print("‚úì FilmAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å–º–∞: max_moments={analyzer.film_config.max_moments}")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FilmAnalyzer: {e}")
        return False

def test_film_moment_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FilmMoment –æ–±—ä–µ–∫—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FilmMoment ===")
    try:
        from Components.FilmMode import FilmMoment

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–º–µ–Ω—Ç
        moment = FilmMoment(
            moment_type="COMBO",
            start_time=10.5,
            end_time=25.3,
            text="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º–æ–º–µ–Ω—Ç–∞",
            context="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
        )

        assert moment.moment_type == "COMBO", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–æ–º–µ–Ω—Ç–∞"
        assert moment.start_time == 10.5, "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"
        assert moment.end_time == 25.3, "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"
        assert moment.text == "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º–æ–º–µ–Ω—Ç–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"
        assert moment.context == "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"

        print("‚úì FilmMoment —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FilmMoment: {e}")
        return False

def test_ranking_weights():
    """–¢–µ—Å—Ç –≤–µ—Å–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç –≤–µ—Å–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ ===")
    try:
        from Components.config import get_config

        config = get_config()
        weights = config.film_mode.ranking_weights

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–µ—Å–æ–≤
        required_weights = [
            'emotional_peaks', 'conflict_escalation', 'punchlines_wit',
            'quotability_memes', 'stakes_goals', 'hooks_cliffhangers', 'visual_penalty'
        ]

        for weight_name in required_weights:
            assert weight_name in weights, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Å: {weight_name}"
            assert isinstance(weights[weight_name], (int, float)), f"–í–µ—Å {weight_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"

        print("‚úì –í—Å–µ –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print(f"‚úì –°—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤: {sum(v for k, v in weights.items() if v > 0):.2f}")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Å–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    try:
        from Components.FilmMode import analyze_film_main

        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = analyze_film_main(url=None, local_path=None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
        assert hasattr(result, 'video_id'), "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç video_id"
        assert result.video_id == "error", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π video_id –ø—Ä–∏ –æ—à–∏–±–∫–µ"
        assert "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞" in result.preview_text, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏"

        print("‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

def test_main_menu_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é main.py"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é ===")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è analyze_film_main –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        from Components.FilmMode import analyze_film_main

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        import inspect
        sig = inspect.signature(analyze_film_main)
        params = list(sig.parameters.keys())

        assert 'url' in params, "–§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä url"
        assert 'local_path' in params, "–§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä local_path"

        print("‚úì –§—É–Ω–∫—Ü–∏—è analyze_film_main –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"‚úì –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏: {params}")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∂–∏–º–∞ '—Ñ–∏–ª—å–º'\n")

    tests = [
        test_imports,
        test_config_loading,
        test_film_analyzer_initialization,
        test_film_moment_creation,
        test_ranking_weights,
        test_error_handling,
        test_main_menu_integration
    ]

    passed = 0
    total = len(tests)

    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚úó –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")

    print(f"\n{'='*50}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –†–µ–∂–∏–º '—Ñ–∏–ª—å–º' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç(–æ–≤) –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)