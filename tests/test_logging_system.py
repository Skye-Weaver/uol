#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.
"""

import time
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from Components.Logger import logger, timed_operation
from Components.config import get_config

def test_basic_logging():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===")

    logger.logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    logger.logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    logger.logger.debug("–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    print("‚úì –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

def test_operation_timing():
    """–¢–µ—Å—Ç —Ç–∞–π–º–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\n=== –¢–µ—Å—Ç —Ç–∞–π–º–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π ===")

    @timed_operation("test_operation")
    def dummy_operation():
        time.sleep(0.5)
        return "—Ä–µ–∑—É–ª—å—Ç–∞—Ç"

    result = dummy_operation()
    print(f"‚úì –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}")

def test_resource_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ===")

    with logger.operation_context("resource_test", {"test_type": "resource_monitoring"}):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
        data = [i ** 2 for i in range(10000)]
        time.sleep(0.2)

    print("‚úì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")

def test_progress_bar():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    print("\n=== –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ ===")

    progress_bar = logger.create_progress_bar(total=10, desc="–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", unit="–∏—Ç–µ—Ä–∞—Ü–∏—è")

    for i in range(10):
        time.sleep(0.1)
        progress_bar.update(1)
        progress_bar.set_postfix({"—Ç–µ–∫—É—â–∏–π": i+1, "–≤—Å–µ–≥–æ": 10})

    progress_bar.close()
    print("‚úì –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")

def test_system_info():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===")

    logger.log_system_info()
    print("‚úì –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞")

def test_gpu_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU"""
    print("\n=== –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU ===")

    gpu_info = logger.monitor.get_gpu_usage()
    if gpu_info:
        logger.logger.info(f"GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {gpu_info}")
        print("‚úì GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logger.logger.info("GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("‚úì GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cfg = get_config()
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {cfg.logging.enable_performance_monitoring}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_basic_logging()
        test_operation_timing()
        test_resource_monitoring()
        test_progress_bar()
        test_system_info()
        test_gpu_monitoring()

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'logs' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        log_dir = Path("logs")
        if log_dir.exists():
            log_files = list(log_dir.glob("*.log"))
            print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã ({len(log_files)}):")
            for log_file in log_files:
                size = log_file.stat().st_size
                print(f"  - {log_file.name} ({size} bytes)")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1

    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.cleanup()

    return 0

if __name__ == "__main__":
    exit(main())