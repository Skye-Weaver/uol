#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ–∫—Ü–∏–µ–π logging.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Components.config import get_config, AppConfig

def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ–∫—Ü–∏–µ–π logging."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cfg = get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç AppConfig
        assert isinstance(cfg, AppConfig), f"–û–∂–∏–¥–∞–ª—Å—è AppConfig, –ø–æ–ª—É—á–µ–Ω {type(cfg)}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ logging
        assert hasattr(cfg, 'logging'), "AppConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏—é logging"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è logging
        logging_config = cfg.logging
        assert hasattr(logging_config, 'log_dir'), "LoggingConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç log_dir"
        assert hasattr(logging_config, 'log_level'), "LoggingConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç log_level"
        assert hasattr(logging_config, 'enable_performance_monitoring'), "LoggingConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç enable_performance_monitoring"
        assert hasattr(logging_config, 'enable_gpu_monitoring'), "LoggingConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç enable_gpu_monitoring"
        assert hasattr(logging_config, 'enable_progress_bars'), "LoggingConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç enable_progress_bars"
        assert hasattr(logging_config, 'gpu_priority_mode'), "LoggingConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç gpu_priority_mode"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        assert logging_config.log_dir == "logs", f"–û–∂–∏–¥–∞–ª–æ—Å—å 'logs', –ø–æ–ª—É—á–µ–Ω–æ '{logging_config.log_dir}'"
        assert logging_config.log_level == "INFO", f"–û–∂–∏–¥–∞–ª–æ—Å—å 'INFO', –ø–æ–ª—É—á–µ–Ω–æ '{logging_config.log_level}'"
        assert logging_config.enable_performance_monitoring == True, f"–û–∂–∏–¥–∞–ª–æ—Å—å True, –ø–æ–ª—É—á–µ–Ω–æ {logging_config.enable_performance_monitoring}"
        assert logging_config.enable_gpu_monitoring == True, f"–û–∂–∏–¥–∞–ª–æ—Å—å True, –ø–æ–ª—É—á–µ–Ω–æ {logging_config.enable_gpu_monitoring}"
        assert logging_config.enable_progress_bars == True, f"–û–∂–∏–¥–∞–ª–æ—Å—å True, –ø–æ–ª—É—á–µ–Ω–æ {logging_config.enable_progress_bars}"
        assert logging_config.gpu_priority_mode == True, f"–û–∂–∏–¥–∞–ª–æ—Å—å True, –ø–æ–ª—É—á–µ–Ω–æ {logging_config.gpu_priority_mode}"

        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print(f"üìä log_dir: {logging_config.log_dir}")
        print(f"üìä log_level: {logging_config.log_level}")
        print(f"üìä enable_performance_monitoring: {logging_config.enable_performance_monitoring}")
        print(f"üìä enable_gpu_monitoring: {logging_config.enable_gpu_monitoring}")
        print(f"üìä enable_progress_bars: {logging_config.enable_progress_bars}")
        print(f"üìä gpu_priority_mode: {logging_config.gpu_priority_mode}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_config_loading()
    sys.exit(0 if success else 1)